version: '3.8'

services:
  # === MongoDB ===
  mongodb:
    image: mongo:latest
    container_name: mongo-db
    restart: always
    ports:
      - '27017:27017'
    volumes:
      - mongo-data:/data/db

  # === PostgreSQL ===
  postgres-order:
    image: postgres:13
    container_name: postgres-order
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
      POSTGRES_DB: order-db
    ports:
      - '5111:5432'
    volumes:
      - postgres-order-data:/var/lib/postgresql/data

  postgres-payment:
    image: postgres:13
    container_name: postgres-payment
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
      POSTGRES_DB: payment-db
    ports:
      - '5112:5432'
    volumes:
      - postgres-payment-data:/var/lib/postgresql/data
  # === REDIS ===
  redis:
    image: redis:latest
    container_name: redis-db
    restart: always
    ports:
      - '6379:6379'

  # === RABBITMQ ===
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    ports:
      - '5672:5672' # Port untuk komunikasi antar service
      - '15672:15672' # Port untuk dashboard web management

  # === USER SERVICE ===
  user-service:
    build:
      context: ../services/user-service
      dockerfile: ../../docker/services/user.Dockerfile
    container_name: user-service
    restart: always
    env_file:
      - ../services/user-service/.env
    environment:
      - MONGO_URI=mongodb://mongo-db:27017
    depends_on:
      - mongodb
    ports:
      - 6006:6006

  # === AUTH SERVICE ===
  auth-service:
    build:
      context: ../services/auth-service
      dockerfile: ../../docker/services/auth.Dockerfile
    container_name: auth-service
    restart: always
    env_file:
      - ../services/auth-service/.env
    ports:
      - 6002:6002

  # === PRODUCT SERVICE ===
  product-service:
    build:
      context: ../services/product-service
      dockerfile: ../../docker/services/product.Dockerfile
    container_name: product-service
    restart: always
    env_file:
      - ../services/product-service/.env
    environment:
      - MONGO_URI=mongodb://mongo-db:27017
      - REDIS_HOST=redis-db
      - REDIS_PORT=6379
      - REDIS_TTL=300
      - RABBITMQ_URL=amqp://rabbitmq:5672
    depends_on:
      - mongodb
      - redis
      - rabbitmq
    ports:
      - 6001:6001

  # === ORDER SERVICE ===
  order-service:
    build:
      context: ../services/order-service
      dockerfile: ../../docker/services/order.Dockerfile
    container_name: order-service
    restart: always
    env_file:
      - ../services/order-service/.env
    # command: sh -c "npx prisma migrate deploy"
    # Jalankan migrasi Prisma saat pertama kali migrate database, jika melakukannya untuk kedua kalinya databasenya akan kosong / menghapus seluruh data

    # Jadi kalau melakukan docker compose kedua kalinya, komentari baris command
    environment:
      - DB_HOST=postgres-order
      - DB_PORT=5432
      - DB_USER=admin
      - DB_PASSWORD=admin123
      - DB_NAME=order-db
      - RABBITMQ_URL=amqp://rabbitmq:5672
    depends_on:
      - postgres-order
      - rabbitmq
    ports:
      - 6005:6005

  # === PAYMENT SERVICE ===
  payment-service:
    build:
      context: ../services/payment-service
      dockerfile: ../../docker/services/payment.Dockerfile
    container_name: payment-service
    restart: always
    env_file:
      - ../services/payment-service/.env
    # command: sh -c "npx prisma migrate deploy"
    # Jalankan migrasi Prisma saat pertama kali migrate database, jika melakukannya untuk kedua kalinya databasenya akan kosong / menghapus seluruh data

    # Jadi kalau melakukan docker compose kedua kalinya, komentari baris command
    environment:
      - DB_HOST=postgres-payment
      - DB_PORT=5432
      - DB_USER=admin
      - DB_PASSWORD=admin123
      - DB_NAME=payment-db
      - RABBITMQ_URL=amqp://rabbitmq:5672
    depends_on:
      - postgres-payment
      - rabbitmq
    ports:
      - 6003:6003

  # === NOTIFICATION SERVICE ===
  notification-service:
    build:
      context: ../services/notification-service
      dockerfile: ../../docker/services/notification.Dockerfile
    container_name: notification-service
    restart: always
    env_file:
      - ../services/notification-service/.env
    environment:
      - RABBITMQ_URL=amqp://rabbitmq:5672
    depends_on:
      - rabbitmq
    ports:
      - 6004:6004

volumes:
  mongo-data:
  postgres-order-data:
  postgres-payment-data:
